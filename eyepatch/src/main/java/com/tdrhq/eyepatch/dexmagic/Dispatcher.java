// (c) 2018 Arnold Noronha <arnold@tdrhq.com>

package com.tdrhq.eyepatch.dexmagic;

import com.tdrhq.eyepatch.util.Checks;

/**
 * All methods generated by EyePatchClassBuilder call into the
 * Dispatcher via invokeStatic, which then delegates to
 * the global sHandler. This model minimizes the amount of dalvik
 * bytecode we need to generate manually.
 */
public abstract class Dispatcher {

    // A token to mark that the Dispatcher should dispatch to the
    // default method.
    public static Object UNHANDLED = new Object();

    private static StaticInvocationHandler DEFAULT_HANDLER = new DelegatingInvocationHandler();

    private static StaticInvocationHandler sHandler = DEFAULT_HANDLER;

    public static void setDefaultHandler() {
        sHandler = DEFAULT_HANDLER;
    }

    public static void setHandler(StaticInvocationHandler handler) {
        sHandler = Checks.notNull(handler);
    }

    public Dispatcher() {
    }

    public static Object invokeStatic(
            GeneratedMethod generatedMethod,
            Object instance,
            Object[] args) {
        Invocation invocation = new Invocation(
                generatedMethod.getTargetClass(),
                instance,
                generatedMethod.getMethod(),
                generatedMethod.getArgTypes(),
                args);
        if (sHandler != null) {
            return sHandler.handleInvocation(invocation);
        }

        return null;
    }
}
